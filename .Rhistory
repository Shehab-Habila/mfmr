MFM::standardize("!!Shehab")
MFM::smart_search()
mfm::find_column()
MFM::find_column()
MFM::standardize()
grep export NAMESPACE
export(generate_count_matrix)
grep export NAMESPACE
export NAMESPACE
find.package("roxygen2")
install.packages("roxygen2")
MFM::standardize("ss")
MFM::standardize("!!sssS.ss")
standardize()
MFM::standardize("!!sssS.ss")
?split_strings_into_letters_and_remove_special
smart_search("Shehab", c("shehab, Shehab"))
smart_search("Shehab", c("shehab, Shehab"))
smart_search("Shehab", c("shehab, Shehab"))
smart_search("Shehab", c("shehab, Shehab", "Ss"))
smart_search("Shehab", c("shehab, Shehab", "Shehab"))
smart_search("Shehab", c("shehab", "Shehab", "Shehab"))
devtools::load_all(".")
devtools::load_all(".")
string_to_find <- "hello world"
reference_strings <- c("hi there", "hello universe", "world hello")
# Perform the smart search
results <- smart_search(string_to_find, reference_strings)
# View the results
print(results)
string_to_find <- "example search"
reference_strings <- c("sample searching", "example of search", "search example")
# Perform the smart search with custom fuzzy matching
results <- smart_search(string_to_find, reference_strings, min_word_matches = 0.5, fuzzy = TRUE, char_range = 3)
# View the results
print(results)
clean_letters <- split_and_remove_special("hello!")
split_and_remove_special("hello!")
match_string_to_string("hello", "helo", TRUE, 1)
?mfmr
?dplyr
devtools::load_all(".")
?split_and_remove_special
library(askpass)
detach("package:askpass", unload = TRUE)
library(askpass)
detach("package:askpass", unload = TRUE)
library("utils")
remove.packages("MFM")
?split_and_remove_special
?match_string_to_string
df1 <- data.frame(a = 1:3, b = 4:6)
df2 <- data.frame(c = 7:9, d = 10:12)
search_list <- list(df1, df2)
find_column(search_list, "a")
find_column(search_list, "c", fuzzy = FALSE)
df3 <- data.frame(Name = c("Alice", "Bob"), Age = c(25, 30))
df4 <- data.frame(Name = c("Carol", "David"), Salary = c(50000, 60000))
search_list2 <- list(df3, df4)
find_column(search_list2, "name")
find_column(search_list2, "salary", fuzzy = TRUE)
df4 <- data.frame(Name = c("Alice", "Bob"), Age = c(25, 30))
df5 <- data.frame(Name = c("Carol", "David"), Salary = c(50000, 60000))
get_from_list2 <- list(df4, df5)
add_to_df2 <- data.frame(Name = c("Alice", "Bob", "Carol", "David"))
match_tables(get_from_list2, add_to_df2, c("Age", "Salary"), "Name", fuzzy = TRUE)
df4 <- data.frame(Name = c("Alice", "Bob"), Age = c(25, 30))
df5 <- data.frame(Name = c("Carol", "David", "Allice"), Salary = c(40000, 50000, 60000))
get_from_list2 <- list(df4, df5)
add_to_df2 <- data.frame(Name = c("Alice", "Bob", "Carol", "David"))
match_tables(get_from_list2, add_to_df2, c("Age", "Salary"), "Name", fuzzy = TRUE)
df3 <- data.frame(Name = c("Alice", "Bob"), Age = c(25, 30))
df4 <- data.frame(Name = c("Alice", "Bob"), Salary = c(50000, 60000))
match_two_tables(df3, df4, "Salary", "Name", fuzzy = TRUE)
df3 <- data.frame(Name = c("Alice", "Bob"), Age = c(25, 30))
df4 <- data.frame(Name = c("Alice", "Bob"), Salary = c(50000, 60000))
match_two_tables(df3, df4, "Age", "Name", fuzzy = TRUE)
ref_vector <- c("This is a sample text", "Another example here", "More text to match")
terget_string <- "sample text"
smart_search(terget_string, ref_vector, min_word_matches = 0.5, fuzzy = TRUE, char_range = 2)
ref_vector <- c("This is a sample text", "Another example here", "More text to match")
terget_string <- "sample text"
smart_search(terget_string, ref_vector, min_word_matches = 0.5, fuzzy = TRUE, char_range = 1)
ref_vector <- c("This is a sample text", "Another example here", "More text to match")
terget_string <- "sample text"
smart_search(terget_string, ref_vector, min_word_matches = 0.7, fuzzy = TRUE, char_range = 1)
ref_vector <- c("This is a sample text", "Another example here", "More text to match")
terget_string <- "sample text"
smart_search(terget_string, ref_vector, min_word_matches = 0.6, fuzzy = TRUE, char_range = 1)
ref_vector <- c("This is a sample text", "Another example here", "More text to match")
terget_string <- "sample text"
smart_search(terget_string, ref_vector, min_word_matches = 0.5, fuzzy = TRUE, char_range = 1)
ref_vector <- c("This is a sample text", "Another example here", "More text to match")
terget_string <- "sample text"
smart_search(terget_string, ref_vector, min_word_matches = 0.5, fuzzy = TRUE, char_range = 0)
df <- data.frame(Name = c("Alice", "Bob"), Age = c(25, 30))
standardize_col_names(df, lowercase = TRUE)
df <- data.frame("First Name." = c("Alice", "Bob"), "_Age" = c(25, 30))
standardize_col_names(df, lowercase = TRUE)
df <- data.frame("First Name." = c("Alice", "Bob"), "Age!" = c(25, 30))
standardize_col_names(df, lowercase = TRUE)
df <- data.frame("First Name." = c("Alice", "Bob"), "Age" = c(25, 30))
standardize_col_names(df, lowercase = TRUE)
Values <- c("Hello", "World", "FOO", "Bar Chart")
standardize_vector(values, lowercase = TRUE)
values <- c("Hello", "World", "FOO", "Bar Chart")
standardize_vector(values, lowercase = TRUE)
standardize("Hello, World!")
standardize("Special @# Characters!", lowercase = FALSE)
df <- data.frame(Name = c("Jonh Doe", "John Doe", "Jon Doe", "Jane Doe"))
df
df_united <- unite_values_in_table(df, c("Jonh Doe"), "John Doe", fuzzy = TRUE)
df_united
?split_and_remove_special
?unite_values_in_table
?unite_values_in_table
rm(list = ls())
library("mfmr")
library(readxl)
Marital_Status <- read_excel("F:/Desktop/Biostatistics/R Learning Project/MFM/data/Marital Status - for cleaning functionalities/Marital Status.xlsx")
View(Marital_Status)
library(readxl)
match_fruits <- read_excel("F:/Desktop/Biostatistics/R Learning Project/MFM/data/products - for matching functionality/fruits.xlsx")
View(match_fruits)
clean_marital_status <- Marital_Status
rm(Marital_Status)
library(readxl)
match_missings <- read_excel("F:/Desktop/Biostatistics/R Learning Project/MFM/data/products - for matching functionality/missings.xlsx")
View(match_missings)
library(readxl)
match_vegetables <- read_excel("F:/Desktop/Biostatistics/R Learning Project/MFM/data/products - for matching functionality/vegetables.xlsx")
View(match_vegetables)
library(readxl)
match_bill <- read_excel("F:/Desktop/Biostatistics/R Learning Project/MFM/data/products - for matching functionality/bill.xlsx")
View(match_bill)
devtools::use_data
use_data
use_data()
library(roxygen2)
library(devtools)
use_data(clean_marital_status)
load("F:/Desktop/Biostatistics/R Learning Project/MFM/MFM Package/MFM/data/clean_marital_status.rda")
use_data(match_bill, match_fruits. match_vegetables, match_missings)
use_data(match_bill, match_fruits, match_vegetables, match_missings)
use_r(data)
use_r("data")
?mfmr::match_bill
View(match_fruits)
View(clean_marital_status)
rm(list = ls())
clean_marital_status
?clean_marital_status
?mfmr::unite_values_in_table
# Sample dataframe
df <- data.frame(Name = c("Jonh Doe", "John Doe", "Jon Doe", "Jane Doe"))
# Unite variations of "John Doe" into a single form
unite_values_in_table(df, c("Jonh Doe"), "John Doe", fuzzy = TRUE)
df
devtools::install_github("Shehab-Habila/mfmr")
?mfmr
??mfmr
df1 <- data.frame(Name = c("Alice", "Bob"), Age = c(25, 30))
df2 <- data.frame(Name = c("Carol", "David", "Allice"), Salary = c(40000, 50000, 60000))
get_from_list <- list(df1, df2)
add_to_df <- data.frame(Name = c("Alice", "Bob", "Carol", "David"))
match_tables(get_from_list, add_to_df, c("Age", "Salary"), "Name", fuzzy = TRUE)
df1 <- data.frame(Name = c("Alice", "Bob"), Age = c(25, 30))
df2 <- data.frame(Name = c("Carol", "David", "Allice"), Salary = c(40000, 50000, 60000))
get_from_list <- list(df1, df2)
add_to_df <- data.frame(Name = c("Alice", "Bob", "Carol", "David"))
match_tables(get_from_list, add_to_df, c("Age", "Salary"), "Name", fuzzy = TRUE)
df <- data.frame("First Name." = c("Alice", "Bob"), "Age" = c(25, 30))
standardize_col_names(df, lowercase = TRUE)
df <- data.frame("First Name." = c("Alice", "Bob"), "Age" = c(25, 30))
standardize_col_names(df, lowercase = TRUE)
values <- c("Hello", "World", "FOO", "Bar Chart")
standardize_vector(values, lowercase = TRUE)
standardize("Hello, World!")
standardize("Special @# Characters!", lowercase = FALSE)
match_bill
matched_data <- smart_match_tables(list(match_vegetable, match_fruits, match_missings), match_bill, get_columns = c("Product Name", "Cost"), according_to = "Product ID", fuzzy = FALSE)
matched_data <- match_tables(list(match_vegetable, match_fruits, match_missings), match_bill, get_columns = c("Product Name", "Cost"), according_to = "Product ID", fuzzy = FALSE)
matched_data <- match_tables(list(match_vegetables, match_fruits, match_missings), match_bill, get_columns = c("Product Name", "Cost"), according_to = "Product ID", fuzzy = FALSE)
matched_data
